# encoding: cp866

def get_command                              #определяем процедуру get_command
actions = [:left, :right, :up, :down]        #определяем массив actions
x = rand(0..3)                               #задаём переменную x и присваиваем ей случайное значение в диапазоне от 0 до 3
actions [x]                                  #выбираем элемент из массива actions, соответствующий номеру х. нумерация в массиве идёт от нуля. можно было написать return actions [x]

end                 

command = get_command  

puts "Получена команда #{command}"   

if command == :left                  #если в переменную command передано значение left, появится сообщение "Робот едет влево" так как значение left было захешировано (двоеточие), то это тот же самый
puts "Робот едет влево"              #объект в памяти, что и в предыдущем цикле if

elsif command == :right
puts "Робот едет вправо"

elsif command == :up
puts "Робот едет вверх"

elsif command == :down
puts "Робот едет вниз"
end



def get_x                            #определяется процедура "get_x"
2 + 2                                #в ходе выполнения процедуры будет выполнена операция 2 + 2
end                                  #окончание процедуры

def get_y                            #определяется процедура "get_y"
get_x * 2                            #в ходе выполнения процедуры будет выполнена операция умножения на 2 результатов выполения процедуры get_x. при этом для этой операции не нужен отдельный вызов get_x
end                                  #окончание процедуры

command_2 = get_y                    #вызов процедуры get_y и передача результатов её выполнения в переменную command_2

puts "Результат #{command_2}"        #вывод на экран результатов выполнения процедуры get_y. Этот результат равен 8