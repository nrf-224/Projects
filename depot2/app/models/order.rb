#в данной модели используется декларация enum, которая позволяет присвоить числовые значения определённым ключам. По сути, это хеш-таблица,
#в которой хранятся числовые значения, соответствующие различным способам оплаты
class Order < ApplicationRecord
  enum pay_type: { #открываем декларацию enum. после неё идёт свойство сущности Order, данные в котором будут обозначены при помощи числовых кодов
    "Check"          => 0, #присваиваем числовой код к этому типу оплаты
    "Credit card"    => 1, #присваиваем числовой код к этому типу оплаты
    "Purchase order" => 2  #присваиваем числовой код к этому типу оплаты
  }
  has_many :line_items, dependent: :destroy

  validates :name, :address, :email, presence: true #добавляем в модель проверку, что поля name, address, email заполнены
  validates :pay_type, inclusion: pay_types.keys #добавляем в модель проверку, что поле pay_type включает в себя только разрешённые значения из enum pay_type
  #Данная валидация сделана потому, что злоумышленник чисто теоретически может передать данные на сервер, минуя форму. и если не будет проверки, это может привести к сбою в работе системы

  def add_line_items_from_cart(cart) #определяем метод add_line_items_form_cart. который используется в методе create файла orders_controller.rb
    cart.line_items.each do |item| #выполняем процедуры, описанные ниже, для всех элементов корзины
      item.cart_id = nil #обнуляем значение поля cart_id
      line_items << item #добавляем значения всех остальных полей в переменную метода item
    end
  end #окончание метода add_line_items_form_cart

end #закрытие описания валидаций, колбеков и деклараций модели Order

